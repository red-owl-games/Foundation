using System.Collections.Generic;
using RedOwl.Engine;
using UnityEditor;
using UnityEditor.AddressableAssets;
using UnityEditor.AddressableAssets.Settings;

namespace RedOwl.Editor
{
    public class AddressableDatabaseGenerator : ICodeGenerator
    {
        public void Generate(string @namespace)
        {
            var table = new Dictionary<string, HashSet<string>>();
            
            var entries = new List<AddressableAssetEntry>();
            foreach (var group in AddressableAssetSettingsDefaultObject.Settings.groups)
            {
                if (group.name == "Built In Data") continue;
                foreach (var entry in group.entries)
                {
                    if (AssetDatabase.LoadAllAssetRepresentationsAtPath(AssetDatabase.GUIDToAssetPath(entry.guid)).Length > 0)
                    {
                        if (!table.TryGetValue(entry.guid, out var tags))
                        {
                            tags = new HashSet<string>();
                            table[entry.guid] = tags;
                        }
                        foreach (string key in entry.CreateKeyList())
                        {
                            if (key == entry.guid) continue;
                            tags.Add(key);
                        }
                    }

                    entries.Clear();
                    entry.GatherAllAssets(entries, true, true, true);
                    foreach (var item in entries)
                    {
                        if (item.guid != entry.guid && !string.IsNullOrEmpty(item.guid))
                        {
                            if (!table.TryGetValue(item.guid, out var subtags))
                            {
                                subtags = new HashSet<string>();
                                table[item.guid] = subtags;
                            }
                            foreach (string key in item.CreateKeyList())
                            {
                                if (key == item.guid) continue;
                                subtags.Add(key);
                            }
                        }
                        else
                        {
                            if (!table.TryGetValue(entry.guid, out var tags))
                            {
                                tags = new HashSet<string>();
                                table[entry.guid] = tags;
                            }
                            foreach (string key in item.CreateKeyList())
                            {
                                if (key == entry.guid) continue;
                                tags.Add(key);
                            }
                        }
                    }
                }
            }

            var pairs = new List<string>();
            foreach (var kvp in table)
            {
                pairs.Add($@"AddressableDatabase.Add(""{kvp.Key}"", new []{{""{string.Join("\", \"", kvp.Value)}""}});");
            }

            string Name = "AddressableDatabaseExtension";
            CodeGenerator.WriteFile(Name, $@"{CodeGenerator.AutoGenerated}
#if UNITY_EDITOR
using System.Collections.Generic;
using RedOwl.Engine;
using UnityEditor;
using UnityEngine;

namespace {@namespace}
{{
    [InitializeOnLoad]
    public static class {Name}
    {{
        static {Name}()
        {{
            Populate();
        }}

        [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.SubsystemRegistration)]
        public static void Populate()
        {{
            {CodeGenerator.Join(pairs, 3)}
        }}
    }}
}}
#endif
");
        }
    }
}
