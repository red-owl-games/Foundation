using System.Collections.Generic;

namespace RedOwl.Editor
{
    public abstract class AddressableDatabaseGenerator<T> : ICodeGenerator where T : UnityEngine.Object
    {
        public abstract string Name { get; }
        
        public string Generate(string @namespace)
        {
            var type = typeof(T);
            var typeNamespace = type.Namespace;
            var typeName = type.Name;
            var voxels = new List<string>();
            var voxelNames = new List<string>();
            foreach (var asset in CodeGenerator.AllAddressables<T>())
            {
                voxels.Add($"public static readonly BetterAssetReference<{typeName}> {asset.Name} = \"{asset.Guid}\";");
                voxelNames.Add($"{asset.Name},");
            }

            return $@"{CodeGenerator.AutoGenerated}
using System.Collections.Generic;
using RedOwl.Engine;
using {typeNamespace};

namespace {@namespace}
{{
    public static class {Name}
    {{
        {CodeGenerator.Join(voxels, 2)}

        public static BetterAssetReference<{typeName}>[] All = new BetterAssetReference<{typeName}>[]
        {{
            {CodeGenerator.Join(voxelNames, 3)}
        }};

        public static async void Preload()
        {{
            foreach (var asset in All)
            {{
                if (asset.IsValid()) continue;
                await asset.LoadAssetAsync<{typeName}>().Task;
            }}
            Log.Always(""'{Name}' All Assets Pre-Loaded!"");
        }}
    }}
}}
";
        }
    }
}
