using System;
using System.Collections.Generic;
using System.IO;
using RedOwl.Engine;
using UnityEditor;
using UnityEditor.AddressableAssets;
using UnityEngine;

namespace RedOwl.Editor
{
    public interface ICodeGenerator
    {
        string Name { get; }

        string Generate(string @namespace);
    }

    public struct AssetData<T>
    {
        public string Guid;
        public string Path;
        public string Name;
        public T Asset;
    }
    
    public static class CodeGenerator
    {
        [MenuItem(("Red Owl/Generate Code"))]
        public static void Generate() // TODO: Run When Unity Starts up?
        {
            string @namespace = GameSettings.CodeGenSettings.@namespace;
            string folder = GameSettings.CodeGenSettings.folder;
            Directory.CreateDirectory(folder.Replace("Assets", Application.dataPath));
            foreach (var generatorType in TypeCache.GetTypesDerivedFrom<ICodeGenerator>())
            {
                if (generatorType.IsAbstract || generatorType.IsInterface) continue;
                var generator = (ICodeGenerator)Activator.CreateInstance(generatorType);
                string filepath = $"{folder}/{generator.Name}.cs";
                Log.Info($"Writing Database '{filepath}'");
                File.WriteAllText(filepath, generator.Generate(@namespace));
            }
            
            AssetDatabase.Refresh();
            
            Log.Always($"Databases Regenerated @ '{folder}'!");
        }
        
        public static object AutoGenerated => @"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------";

        private const string Space = "";
        public static string Newline(int indent = 0) => $"{Environment.NewLine}{Space.PadLeft(indent * 4)}";
        
        public static string Join(IEnumerable<string> values, int indent = 0) => string.Join($"{Newline(indent)}", values);
        
        public static bool IsAddressable(string guid)
        {
            var settings = AddressableAssetSettingsDefaultObject.GetSettings(true);
            var entry = settings.FindAssetEntry(guid);
            if (entry != null) return true;
            string dir = Path.GetDirectoryName(AssetDatabase.GUIDToAssetPath(guid));
            while (!string.IsNullOrEmpty(dir))
            {
                var dirEntry = settings.FindAssetEntry(AssetDatabase.AssetPathToGUID(dir));
                if (dirEntry != null) return true;
                dir = Path.GetDirectoryName(dir);
            }
            return false;
        }

        public static IEnumerable<AssetData<T>> AllAssets<T>() where T : UnityEngine.Object
        {
            foreach (string guid in AssetDatabase.FindAssets($"t:{typeof(T).FullName}"))
            {
                var path = AssetDatabase.GUIDToAssetPath(guid);
                var asset = AssetDatabase.LoadAssetAtPath<T>(path);
                yield return new AssetData<T>
                {
                    Guid = guid,
                    Path = path,
                    Name = asset.name,
                    Asset = asset,
                };
            }
        }

        public static IEnumerable<AssetData<T>> AllAddressables<T>() where T : UnityEngine.Object
        {
            foreach (var data in AllAssets<T>())
            {
                if (!IsAddressable(data.Guid)) continue;
                yield return data;
            }
        }
    }
}