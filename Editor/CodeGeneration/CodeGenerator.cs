using System;
using System.Collections.Generic;
using System.IO;
using RedOwl.Engine;
using UnityEditor;
using UnityEditor.AddressableAssets;
using UnityEditor.AddressableAssets.Settings;
using UnityEditor.AddressableAssets.Settings.GroupSchemas;
using UnityEngine;

namespace RedOwl.Editor
{
    public interface ICodeGenerator
    {
        void Generate(string @namespace);
    }

    public struct AssetData
    {
        public string Guid;
        public string Path;
        public UnityEngine.Object Asset;
        public string Name;
        public Type Type;

        public T Get<T>() where T : UnityEngine.Object
        {
            if (typeof(T) != Type) Log.Always($"Trying to get asset type '{typeof(T)}' from type '{Type}'");
            return (T) Asset;
        }
    }
    
    public static class CodeGenerator
    {
        [MenuItem(("Red Owl/Generate Code"))]
        public static void Generate() // TODO: Run When Unity Starts up?
        {
            string @namespace = GameSettings.CodeGenSettings.@namespace;
            string folder = GameSettings.CodeGenSettings.folder;
            Directory.CreateDirectory(folder.Replace("Assets", Application.dataPath));
            foreach (var generatorType in TypeCache.GetTypesDerivedFrom<ICodeGenerator>())
            {
                if (generatorType.IsAbstract || generatorType.IsInterface) continue;
                ((ICodeGenerator)Activator.CreateInstance(generatorType)).Generate(@namespace);
            }
            
            AssetDatabase.Refresh();
            
            Log.Always($"Code Regenerated @ '{folder}'");
        }
        
        public static object AutoGenerated => @"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------";

        private const string Space = "";
        public static string Newline(int indent = 0) => $"{Environment.NewLine}{Space.PadLeft(indent * 4)}";
        
        public static string Join(IEnumerable<string> values, int indent = 0) => string.Join($"{Newline(indent)}", values);
        
        public static bool IsAddressable(string guid)
        {
            var settings = AddressableAssetSettingsDefaultObject.GetSettings(true);
            var entry = settings.FindAssetEntry(guid);
            if (entry != null) return true;
            string dir = Path.GetDirectoryName(AssetDatabase.GUIDToAssetPath(guid));
            while (!string.IsNullOrEmpty(dir))
            {
                var dirEntry = settings.FindAssetEntry(AssetDatabase.AssetPathToGUID(dir));
                if (dirEntry != null) return true;
                dir = Path.GetDirectoryName(dir);
            }
            return false;
        }

        public static AssetData GetAssetData(string guid)
        {
            var path = AssetDatabase.GUIDToAssetPath(guid);
            var asset = AssetDatabase.LoadAssetAtPath(path, typeof(UnityEngine.Object));
            return new AssetData
            {
                Guid = guid,
                Path = path,
                Asset = asset,
                Name = asset.name,
                Type = asset.GetType(),
            };
        }

        // TODO: this probably isn't needed
        public static IEnumerable<AssetData> AllAssets<T>() where T : UnityEngine.Object
        {
            foreach (string guid in AssetDatabase.FindAssets($"t:{typeof(T).Name}"))
            {
                yield return GetAssetData(guid);
            }
        }

        [ClearOnReload]
        private static Dictionary<string, HashSet<string>> _addressableTable;
        
        public static Dictionary<string, HashSet<string>> AllAddressables()
        {
            if (_addressableTable != null) return _addressableTable;
            
            _addressableTable = new Dictionary<string, HashSet<string>>();
            
            var entries = new List<AddressableAssetEntry>();
            foreach (var group in AddressableAssetSettingsDefaultObject.Settings.groups)
            {
                if (group.HasSchema<PlayerDataGroupSchema>()) continue;
                foreach (var entry in group.entries)
                {
                    if (AssetDatabase.LoadAllAssetRepresentationsAtPath(AssetDatabase.GUIDToAssetPath(entry.guid)).Length > 0)
                    {
                        if (!_addressableTable.TryGetValue(entry.guid, out var tags))
                        {
                            tags = new HashSet<string>();
                            _addressableTable[entry.guid] = tags;
                        }
                        foreach (string key in entry.CreateKeyList())
                        {
                            if (key == entry.guid) continue;
                            tags.Add(key);
                        }
                    }

                    entries.Clear();
                    entry.GatherAllAssets(entries, true, true, true);
                    foreach (var item in entries)
                    {
                        if (item.guid != entry.guid && !string.IsNullOrEmpty(item.guid))
                        {
                            if (!_addressableTable.TryGetValue(item.guid, out var subtags))
                            {
                                subtags = new HashSet<string>();
                                _addressableTable[item.guid] = subtags;
                            }
                            foreach (string key in item.CreateKeyList())
                            {
                                if (key == item.guid) continue;
                                subtags.Add(key);
                            }
                        }
                        else
                        {
                            if (!_addressableTable.TryGetValue(entry.guid, out var tags))
                            {
                                tags = new HashSet<string>();
                                _addressableTable[entry.guid] = tags;
                            }
                            foreach (string key in item.CreateKeyList())
                            {
                                if (key == entry.guid) continue;
                                tags.Add(key);
                            }
                        }
                    }
                }
            }

            return _addressableTable;
        }

        public static void WriteFile(string filename, string contents)
        {
            string filepath = $"{GameSettings.CodeGenSettings.folder}/{filename}.cs";
            Log.Info($"Generated '{filepath}'");
            File.WriteAllText(filepath, contents);
        }
    }
}